/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-05-16 14:36:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.manage.user.userManage;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import util.PageController;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import admin.userManage.UserManageDAO;
import admin.userManage.UserManageVO;

public final class userInfoManage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  public java.lang.String getServletInfo() {
    return "";
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1715869714055L));
    _jspx_dependants.put("jar:file:/C:/dev/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/online-shop/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(9);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("util.PageController");
    _jspx_imports_classes.add("admin.userManage.UserManageDAO");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("admin.userManage.UserManageVO");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\r\n");


Boolean isLoggedIn = (Boolean) session.getAttribute("isLoggedIn");
System.out.println("세션 로그인 상태: " + isLoggedIn);

if (!Boolean.TRUE.equals(isLoggedIn)) {
  System.out.println("로그인이 필요합니다. ");

      out.write("\r\n");
      out.write("  <script type=\"text/javascript\">\r\n");
      out.write("      alert('로그인이 필요합니다.');\r\n");
      out.write("      window.location.href = '../../adminLogin/adminLogin.jsp';\r\n");
      out.write("  </script>\r\n");

  return;
}

      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://demofran.com/admin/css/admin.css?ver=20240430210223\">\r\n");
      out.write("<link type=\"text/css\" href=\"https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.17/themes/base/jquery-ui.css\" rel=\"stylesheet\">\r\n");
      out.write("<link type=\"text/css\" href=\"http://demofran.com/plugin/jquery-ui/style.css?ver=20240430210223\">\r\n");
      out.write("<link rel=\"shortcut icon\" href=\"http://demofran.com/data/banner/JnLfWUSUyR6sXJP5n3Re4Fvdc93k93.ico\" type=\"image/x-icon\">\r\n");
      out.write("<!-- 페이지네이션 CSS 파일 추가 -->\r\n");
      out.write("    <link href=\"http://localhost/assets/css/pagenation.css\" rel=\"stylesheet\" />\r\n");
      out.write("\r\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../../assets/jsp/admin/lib.jsp", out, false);
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function(){\r\n");
      out.write("    	$(\"#user_menu\").addClass(\"bg-gradient-primary\");\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	function openInNewWindow(url) {\r\n");
      out.write("	    // 새 창을 열고, 크기와 위치를 지정합니다.\r\n");
      out.write("	    // 'width=800'과 'height=600'은 새 창의 크기를 800x600 픽셀로 설정합니다.\r\n");
      out.write("	    // 'left=200'과 'top=100'은 새 창의 화면에서의 위치를 설정합니다.\r\n");
      out.write("	    window.open(url, 'newWindow', 'width=800,height=600,left=200,top=100');\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- DatePicker -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css\">\r\n");
      out.write("<!-- DatePicker -->\r\n");
      out.write("\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("    \r\n");
      out.write("    <script>\r\n");
      out.write("   \r\n");
      out.write("    function zipcodeapi() {\r\n");
      out.write("        new daum.Postcode({\r\n");
      out.write("            oncomplete: function(data) {\r\n");
      out.write("                // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("                // 각 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("                var fullAddr = ''; // 최종 주소 변수\r\n");
      out.write("                var extraAddr = ''; // 조합형 주소 변수\r\n");
      out.write("\r\n");
      out.write("                // 사용자가 선택한 주소 타입에 따라 해당 주소 값을 가져온다.\r\n");
      out.write("                if (data.userSelectedType === 'R') { // 사용자가 도로명 주소를 선택했을 경우\r\n");
      out.write("                    fullAddr = data.roadAddress;\r\n");
      out.write("\r\n");
      out.write("                } else { // 사용자가 지번 주소를 선택했을 경우(J)\r\n");
      out.write("                    fullAddr = data.jibunAddress;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                // 사용자가 선택한 주소가 도로명 타입일때 조합한다.\r\n");
      out.write("                if(data.userSelectedType === 'R'){\r\n");
      out.write("                    //법정동명이 있을 경우 추가한다.\r\n");
      out.write("                    if(data.bname !== ''){\r\n");
      out.write("                        extraAddr += data.bname;\r\n");
      out.write("                    }\r\n");
      out.write("                    // 건물명이 있을 경우 추가한다.\r\n");
      out.write("                    if(data.buildingName !== ''){\r\n");
      out.write("                        extraAddr += (extraAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("                    }\r\n");
      out.write("                    // 조합형주소의 유무에 따라 양쪽에 괄호를 추가하여 최종 주소를 만든다.\r\n");
      out.write("                    fullAddr += (extraAddr !== '' ? ' ('+ extraAddr +')' : '');\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("                $('#postcode1').val(data.zonecode); //5자리 새우편번호 사용\r\n");
      out.write("                $('#addr1').val(fullAddr);\r\n");
      out.write("\r\n");
      out.write("                // 커서를 상세주소 필드로 이동한다.\r\n");
      out.write("                $('#addr2').focus();\r\n");
      out.write("            }\r\n");
      out.write("        }).open();\r\n");
      out.write("    }\r\n");
      out.write("    \r\n");
      out.write("    </script>\r\n");
      out.write("    \r\n");
      out.write("<!-- golgolz start -->\r\n");
      out.write("<!-- golgolz end -->\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../../assets/jsp/admin/header.jsp", out, false);
      out.write("\r\n");
      out.write("	<main\r\n");
      out.write("		class=\"main-content position-relative max-height-vh-100 h-100 border-radius-lg ps ps--active-y\">\r\n");
      out.write("		<nav\r\n");
      out.write("			class=\"navbar navbar-main navbar-expand-lg px-0 mx-4 shadow-none border-radius-xl\"\r\n");
      out.write("			id=\"navbarBlur\" data-scroll=\"true\">\r\n");
      out.write("			<div class=\"container-fluid py-1 px-3\">\r\n");
      out.write("				<nav aria-label=\"breadcrumb\">\r\n");
      out.write("					<ol\r\n");
      out.write("						class=\"breadcrumb bg-transparent mb-0 pb-0 pt-1 px-0 me-sm-6 me-5\">\r\n");
      out.write("						<li class=\"breadcrumb-item text-sm\"><a\r\n");
      out.write("							class=\"opacity-5 text-dark\" href=\"javascript:;\">\r\n");
      out.write("							관리자 기능</a></li>\r\n");
      out.write("						<!-- 하단의 대시보드 텍스트를 본인 기능으로 변경 필요  -->\r\n");
      out.write("						<li class=\"breadcrumb-item text-sm text-dark active\"\r\n");
      out.write("							aria-current=\"page\">사용자 관리</li>\r\n");
      out.write("					</ol>\r\n");
      out.write("					<a href=\"#\" onclick=\"http://localhost/manage/user/userManage/userInfoManage.jsp\" class=\"original\">\r\n");
      out.write("					<h6 class=\"font-weight-bolder mb-0\">사용자 관리</h6>\r\n");
      out.write("					</a>\r\n");
      out.write("				</nav>\r\n");
      out.write("			</div>\r\n");
      out.write("		</nav>\r\n");
      out.write("		<div class=\"container-fluid py-4\">\r\n");
      out.write("		\r\n");
      out.write("			<!-- golgolz start -->\r\n");
      out.write("			\r\n");
      out.write("			<div class=\"s_wrap\">\r\n");
      out.write("	<h4>회원 정보관리</h4>\r\n");
      out.write("	\r\n");
      out.write("	");

		    // 폼에서 입력된 ID 값을 가져옵니다.

		
      out.write("\r\n");
      out.write("	\r\n");
      out.write("<script type=\"text/javascript\" src=\"//ajax.googleapis.com/ajax/libs/jqueryui/1.8.17/jquery-ui.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("$(function() {\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("    $(\"#btnToday\").click(function() {// 오늘 날짜 불러오기\r\n");
      out.write("        const today = new Date();\r\n");
      out.write("        console.log(\"today : \", today);\r\n");
      out.write("        const year = today.getFullYear();\r\n");
      out.write("        console.log(\"year :\", year)\r\n");
      out.write("        const month = String(today.getMonth() + 1).padStart(2, '0');\r\n");
      out.write("        const day = String(today.getDate()).padStart(2, '0');\r\n");
      out.write("        \r\n");
      out.write("        const formattedDate = year + '-' + month + '-' + day;\r\n");
      out.write("        console.log(\"Formatted date: \", formattedDate);\r\n");
      out.write("        \r\n");
      out.write("        $(\"#fr_date\").val(formattedDate);\r\n");
      out.write("        $(\"#to_date\").val(formattedDate);\r\n");
      out.write("        \r\n");
      out.write("     	// 페이지를 새로 고침하여 스크립틀릿에서 값을 다시 읽을 수 있도록 합니다.\r\n");
      out.write("        $(\"#fsearch\").submit();\r\n");
      out.write("        \r\n");
      out.write("    });\r\n");
      out.write("    $(\"#btnWeekly\").click(function() { // 1주일 전 날짜 불러오기\r\n");
      out.write("        // 현재 날짜를 가져옵니다.\r\n");
      out.write("        const today = new Date();\r\n");
      out.write("\r\n");
      out.write("        // 일주일 전 날짜를 계산합니다.\r\n");
      out.write("        const lastWeek = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\r\n");
      out.write("\r\n");
      out.write("        const year = lastWeek.getFullYear();\r\n");
      out.write("        const month = String(lastWeek.getMonth() + 1).padStart(2, '0');\r\n");
      out.write("        const day = String(lastWeek.getDate()).padStart(2, '0');\r\n");
      out.write("        const formattedDate = year + '-' + month + '-' + day;\r\n");
      out.write("\r\n");
      out.write("        $(\"#fr_date\").val(formattedDate);\r\n");
      out.write("        $(\"#to_date\").val(today.toISOString().slice(0, 10));\r\n");
      out.write("\r\n");
      out.write("        // 폼을 제출합니다.\r\n");
      out.write("        $(\"#fsearch\").submit();\r\n");
      out.write("    });\r\n");
      out.write("    $(\"#btnMonthly\").click(function() {\r\n");
      out.write("        // 현재 날짜를 가져옵니다.\r\n");
      out.write("        const today = new Date();\r\n");
      out.write("\r\n");
      out.write("        // 한 달 전 날짜를 계산합니다.\r\n");
      out.write("        const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\r\n");
      out.write("\r\n");
      out.write("        // 한 달 전 날짜를 \"yyyy-mm-dd\" 형식으로 조합합니다.\r\n");
      out.write("        const year = lastMonth.getFullYear();\r\n");
      out.write("        const month = String(lastMonth.getMonth() + 1).padStart(2, '0');\r\n");
      out.write("        const day = String(lastMonth.getDate()).padStart(2, '0');\r\n");
      out.write("        const formattedDate = year + '-' + month + '-' + day;\r\n");
      out.write("\r\n");
      out.write("        // 'fr_date' 입력 필드의 값을 한 달 전의 날짜로 설정합니다.\r\n");
      out.write("        $(\"#fr_date\").val(formattedDate);\r\n");
      out.write("        // 'to_date' 입력 필드의 값을 오늘의 날짜로 설정합니다.\r\n");
      out.write("        $(\"#to_date\").val(today.toISOString().slice(0, 10));\r\n");
      out.write("\r\n");
      out.write("        // 폼을 제출합니다.\r\n");
      out.write("        $(\"#fsearch\").submit();\r\n");
      out.write("    });\r\n");
      out.write("    $(\"#btnReset\").click(function() {\r\n");
      out.write("        // 초기화 버튼을 누르면 userInfoManage.jsp로 리다이렉트합니다.\r\n");
      out.write("        window.location.href = \"userInfoManage.jsp\";\r\n");
      out.write("    });\r\n");
      out.write("    // tr 요소에 클릭 이벤트를 추가합니다.\r\n");
      out.write("    $(\".user-row\").on(\"click\", function() {\r\n");
      out.write("        // 해당 tr 요소의 id 속성에서 userId를 가져옵니다.\r\n");
      out.write("        const userId = $(this).attr('id');\r\n");
      out.write("        \r\n");
      out.write("     // 디버깅: userId 값을 콘솔에 출력합니다.\r\n");
      out.write("        console.log(\"클릭된 tr 요소의 userId:\", userId);\r\n");
      out.write("        \r\n");
      out.write("        // encodeURIComponent를 사용하여 userId를 URL 인코딩합니다.\r\n");
      out.write("        const encodedUserId = encodeURIComponent(userId);\r\n");
      out.write("        \r\n");
      out.write("     // 디버깅: 인코딩된 userId 값을 콘솔에 출력합니다.\r\n");
      out.write("        console.log(\"URL 인코딩된 userId:\", encodedUserId);\r\n");
      out.write("        \r\n");
      out.write("        // 다른 JSP로 리다이렉트할 URL을 만듭니다.\r\n");
      out.write("		const url = \"detailedInfoManage.jsp?userId=\" + encodedUserId;\r\n");
      out.write("        \r\n");
      out.write("        // 해당 URL로 리다이렉트합니다.\r\n");
      out.write("        window.location.href = url;\r\n");
      out.write("    });\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<form name=\"fsearch\" id=\"fsearch\" method=\"get\" onsubmit=\"return handleFormSubmit(event); \" action=\"userInfoManage.jsp\">\r\n");
      out.write("<input type=\"hidden\" name=\"code\" value=\"list\">\r\n");
      out.write("<div class=\"tbl_frm01\">\r\n");
      out.write("	<table>\r\n");
      out.write("	<colgroup>\r\n");
      out.write("		<col class=\"w100\">\r\n");
      out.write("		<col>\r\n");
      out.write("	</colgroup>\r\n");
      out.write("	<tbody>\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th scope=\"row\">검색어</th>\r\n");
      out.write("		<td>\r\n");
      out.write("			<select name=\"sfl\">\r\n");
      out.write("				<option value=\"id\">아이디</option>\r\n");
      out.write("				<option value=\"name\">회원명</option>\r\n");
      out.write("			</select>\r\n");
      out.write("			<input type=\"text\" name=\"stx\" value=\"\" class=\"frm_input\" size=\"30\">\r\n");
      out.write("		</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th scope=\"row\">가입일</th>\r\n");
      out.write("		<td>\r\n");
      out.write("			<label for=\"fr_date\" class=\"sound_only\">시작일</label>\r\n");
      out.write("<input type=\"text\" name=\"fr_date\" value=\"");
      out.print( (request.getParameter("fr_date") != null ? request.getParameter("fr_date") : "") );
      out.write("\" id=\"fr_date\" class=\"frm_input w80 hasDatepicker\" maxlength=\"10\">\r\n");
      out.write(" ~ \r\n");
      out.write("<label for=\"to_date\" class=\"sound_only\">종료일</label>\r\n");
      out.write("<input type=\"text\" name=\"to_date\" value=\"");
      out.print( (request.getParameter("to_date") != null ? request.getParameter("to_date") : "") );
      out.write("\" id=\"to_date\" maxlength=\"10\">\r\n");
      out.write("<span class=\"btn_group\">\r\n");
      out.write("<input type=\"button\" id=\"btnToday\" onclick=\"\" class=\"btn_small white\" value=\"오늘\">\r\n");
      out.write("<input type=\"button\" id=\"btnWeekly\" onclick=\"\" class=\"btn_small white\" value=\"일주일\">\r\n");
      out.write("<input type=\"button\" id=\"btnMonthly\"onclick=\"search_date('fr_date','to_date',this.value);\" class=\"btn_small white\" value=\"1개월\">\r\n");
      out.write("<input type=\"button\" id=\"btnReset\"onclick=\"\" class=\"btn_small white\" value=\"초기화\">\r\n");
      out.write("</span>		</td>\r\n");
      out.write("	</tr>\r\n");
      out.write("	\r\n");
      out.write("	</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"btn_confirm\">\r\n");
      out.write("	<input type=\"submit\" value=\"검색\" class=\"btn_medium\">\r\n");
      out.write("</div>\r\n");
      out.write("</form>\r\n");
      out.write(" <script src=\"https://cdn.jsdelivr.net/npm/flatpickr\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        // Flatpickr를 사용하여 날짜 선택 input에 Datepicker 기능 추가\r\n");
      out.write("        document.addEventListener('DOMContentLoaded', function () {\r\n");
      out.write("            // 시작일과 종료일 input 요소 가져오기\r\n");
      out.write("            var frDateInput = document.getElementById('fr_date');\r\n");
      out.write("            var toDateInput = document.getElementById('to_date');\r\n");
      out.write("\r\n");
      out.write("            // Flatpickr 적용\r\n");
      out.write("            flatpickr(frDateInput, {\r\n");
      out.write("                dateFormat: 'Y-m-d', // 날짜 형식 설정\r\n");
      out.write("                allowInput: true // 키보드로 직접 입력 허용\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            flatpickr(toDateInput, {\r\n");
      out.write("                dateFormat: 'Y-m-d', // 날짜 형식 설정\r\n");
      out.write("                allowInput: true // 키보드로 직접 입력 허용\r\n");
      out.write("            });\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"local_ov mart30\">\r\n");
      out.write("	총 회원수 : <b class=\"fc_red\">3</b>명\r\n");
      out.write("</div>\r\n");
      out.write("<div class=\"tbl_head01\">\r\n");
      out.write("	<table>\r\n");
      out.write("	<colgroup>\r\n");
      out.write("		<col class=\"w50\">\r\n");
      out.write("		<col class=\"w130\">\r\n");
      out.write("		<col class=\"w150\">\r\n");
      out.write("		<col>\r\n");
      out.write("		<col class=\"w130\">\r\n");
      out.write("		<col class=\"w100\">\r\n");
      out.write("		<col class=\"w130\">\r\n");
      out.write("		<col class=\"w60\">\r\n");
      out.write("		<col class=\"w60\">\r\n");
      out.write("		<col class=\"w60\">\r\n");
      out.write("				<col class=\"w90\">\r\n");
      out.write("	</colgroup>\r\n");
      out.write("	<thead>\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th scope=\"col\">번호</th>\r\n");
      out.write("		<th scope=\"col\"><a href=\"/admin/member.php?code=list&amp;page=&amp;filed=name&amp;orderby=asc\">회원명</a></th>\r\n");
      out.write("		<th scope=\"col\"><a href=\"/admin/member.php?code=list&amp;page=&amp;filed=id&amp;orderby=asc\">아이디</a></th>\r\n");
      out.write("		<th scope=\"col\">핸드폰</th>\r\n");
      out.write("		<th scope=\"col\"><a href=\"/admin/member.php?code=list&amp;page=&amp;filed=reg_time&amp;orderby=asc\">가입일시</a></th>\r\n");
      out.write("		<th scope=\"col\">구매수</th>\r\n");
      out.write("		<th scope=\"col\"><a href=\"/admin/member.php?code=list&amp;page=&amp;filed=intercept_date&amp;orderby=asc\">접근차단</a></th>\r\n");
      out.write("		<th scope=\"col\"><a href=\"/admin/member.php?code=list&amp;page=&amp;filed=intercept_date&amp;orderby=asc\">탈퇴여부</a></th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	</thead>\r\n");
      out.write("	<tbody class=\"list\">\r\n");
      out.write("	\r\n");
      out.write("				 ");
 
				 String inputId = request.getParameter("stx");
				 String sfl = request.getParameter("sfl");

				 String frDate = request.getParameter("fr_date");
				 String toDate = request.getParameter("to_date");

				 // 입력값을 디버깅합니다.
				 System.out.println("fr_date: " + frDate + ", to_date: " + toDate);

				 // inputId를 trim()하여 공백을 제거한 후, 빈 문자열인지 확인.
				 if (inputId != null && inputId.trim().isEmpty()) {
				     inputId = null; // 공백 값인 경우 inputId를 null로 설정.
				 }

				 System.out.println("------"+inputId+"-----"+sfl);
				 System.out.println("inputId 값 디버깅: " + (inputId == null ? "null" : inputId));

				 // 사용자 정보 목록을 얻는 로직
				 UserManageDAO dao = new UserManageDAO();
				 List<UserManageVO> userList = null;

				 // 날짜 포맷팅 및 초기값 설정
				 SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
				 String today = formatter.format(new Date());

				 if (frDate == null || frDate.trim().isEmpty()) {
				     frDate = "1970-01-01"; // 시작 날짜가 입력되지 않았을 때, 초기 날짜 설정
				 }
				 if (toDate == null || toDate.trim().isEmpty()) {
				     toDate = today; // 종료 날짜가 입력되지 않았을 때, 오늘 날짜로 설정
				 }

				// 검색 조건에 따라 DAO 메소드 호출
				 if (sfl != null && sfl.equals("id") && inputId != null && !inputId.trim().isEmpty() && frDate != null && !frDate.trim().isEmpty() && toDate != null && !toDate.trim().isEmpty()) {
				     // inputId와 날짜 범위에 따른 검색 수행
				     try {
				         userList = dao.selectUserInfoByIdAndDateRange(inputId, frDate, toDate);
				         System.out.println("------ inputId와 날짜 범위 조건에 따른 사용자가 조회되었습니다. ------");
				         System.out.println("inputId: " + inputId + ", frDate: " + frDate + ", toDate: " + toDate);
				     } catch (Exception e) {
				         e.printStackTrace();
				     }
				 } else if (inputId != null && !inputId.trim().isEmpty() && sfl != null && sfl.equals("name")) {
				     // inputName과 날짜 범위에 따른 검색 수행
				     try {
				         userList = dao.selectUserInfoByNameAndDateRange(inputId, frDate, toDate);
				         System.out.println("------ inputName과 날짜 범위 조건에 따른 사용자가 조회되었습니다. ------");
				         System.out.println("inputName: " + inputId + ", frDate: " + frDate + ", toDate: " + toDate);
				     } catch (Exception e) {
				         e.printStackTrace();
				     }
				 } else if (inputId != null && sfl != null) {
				     // sfl 값에 따라 다른 검색 수행
				     switch (sfl) {
				         case "id":
				             userList = dao.selectUserInfoById(inputId);
				             System.out.println("------ 사용자 ID에 따른 정보가 조회되었습니다. ------");
				             break;
				         case "name":
				             userList = dao.selectUserInfoByName(inputId);
				             System.out.println("------ 사용자 이름에 따른 정보가 조회되었습니다. ------");
				             break;
				         default:
				             System.out.println("sfl 값이 유효하지 않습니다.");
				             break;
				     }
				 } else {
				     // 날짜 범위에 따른 검색 수행
				     userList = dao.selectUserInfoByDateRange(frDate, toDate);
				     System.out.println("------ 날짜 범위에 따른 사용자 정보가 조회되었습니다. ------");
				 }
				
				 int pageScale = 10;
			        int currentPage = Integer.parseInt(request.getParameter("page") != null ? request.getParameter("page") : "1");
			        int startNum = pageScale * (currentPage - 1) + 1;
			        int endNum = startNum + pageScale - 1;

				// 사용자 정보 출력
				 for (int i = 0;i < userList.size(); i++) {
				     UserManageVO userInfo = userList.get(i);
				     // 각 사용자에 대한 행 번호(rowNum)를 i + 1로 설정
				     int rowNum = i + 1;
				     
				     
      out.write("\r\n");
      out.write("				     <tr id=\"");
      out.print(userInfo.getId() );
      out.write("\" class=\"user-row\">\r\n");
      out.write("				         <td>");
      out.print( rowNum );
      out.write("</td> <!-- 행 번호 출력 -->\r\n");
      out.write("				         <td class=\"tal\"><span class=\"sv_wrap\">");
      out.print( userInfo.getName() );
      out.write("</span></td>\r\n");
      out.write("				         <td class=\"tal\">");
      out.print( userInfo.getId() );
      out.write("</td>\r\n");
      out.write("				         <td>");
      out.print( userInfo.getTel() );
      out.write("</td>\r\n");
      out.write("				         <td>");
      out.print( userInfo.getInput_date() );
      out.write("</td>\r\n");
      out.write("				         <td>");
      out.print( userInfo.getTotal_amount() );
      out.write("</td>\r\n");
      out.write("				         <td>");
      out.print( userInfo.getAccess_limit_flag() );
      out.write("</td>\r\n");
      out.write("				         <td>");
      out.print( userInfo.getWithdrawal_flag() );
      out.write("</td>\r\n");
      out.write("				     </tr>\r\n");
      out.write("				     ");

				 } 
    
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("		</tbody>\r\n");
      out.write("	</table>\r\n");
      out.write("	\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("			<!-- golgolz end -->\r\n");
      out.write("		</div>\r\n");
      out.write("	</main>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
