/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-04-22 00:22:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.day0419;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;

public final class request_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  public java.lang.String getServletInfo() {
    return "request 내장객체 사용";
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(1);
    _jspx_imports_classes.add("java.util.Enumeration");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<link rel=\"icon\" href=\"http://192.168.10.216/jsp_prj/common/favicon.ico\"/>\r\n");
      out.write("<!--bootstrap 시작-->\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH\" crossorigin=\"anonymous\">\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<!--bootstrap 끝-->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://192.168.10.216/jsp_prj/common/css/main.css\" type=\"text/css\" media=\"all\" />\r\n");
      out.write("<link rel=\"stylesheet\" href=\"http://192.168.10.216/jsp_prj/common/css/board.css\" type=\"text/css\" media=\"all\" />\r\n");
      out.write("<!--jQuery CDN 시작-->\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js\"></script>\r\n");
      out.write("<!--jQuery CDN 끝-->\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	ul,ol,li{list-style:none;padding:0px}\r\n");
      out.write("	span{font-weight:bold;}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	$(function(){\r\n");
      out.write("		\r\n");
      out.write("	});//ready\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<h3>request 내장객체를 사용한 접속자 정보 얻기!!!</h3>\r\n");
      out.write("	<ul>\r\n");
      out.write("	<li><span>요청방식</span> : ");
      out.print( request.getMethod() );
      out.write("</li><!-- jsp에서 직접 요청하는 방식 : get -->\r\n");
      out.write("	<li><span>요청URL</span> : ");
      out.print( request.getRequestURL() );
      out.write("</li>\r\n");
      out.write("	<li><span>요청Protocol</span> : ");
      out.print( request.getProtocol() );
      out.write("</li>\r\n");
      out.write("	<li><span>요청ServerName</span> : ");
      out.print( request.getServerName() );
      out.write("</li>\r\n");
      out.write("	<li><span>요청ServerPort</span> : ");
      out.print( request.getServerPort() );
      out.write("</li>\r\n");
      out.write("	<li><span>요청URI</span> : ");
      out.print( request.getRequestURI() );
      out.write("</li>\r\n");
      out.write("	<li><span>요청경로</span> : ");
      out.print( request.getServletPath() );
      out.write("</li>\r\n");
      out.write("	<li><span>접속자 IP address</span> : ");
      out.print( request.getRemoteAddr() );
      out.write("</li>\r\n");
      out.write("	<li><span>접속자 PORT</span> : ");
      out.print( request.getRemotePort() );
      out.write("</li>\r\n");
      out.write("	<li><span>QueryString</span> : ");
      out.print( request.getQueryString() );
      out.write("</li>\r\n");
      out.write("	<li><span>web parameter</span> : ");
      out.print( request.getParameter("name") );
      out.write("</li>\r\n");
      out.write("	<li><span>web parameter</span> : ");
      out.print( request.getParameter("age") );
      out.write("</li>\r\n");
      out.write("	<li><span>중복된 이름의 web parameter</span> :\r\n");
      out.write("		 ");
 String[] ages=request.getParameterValues("age");
				if(ages != null){
					for(int i=0; i<ages.length; i++){
					  out.print(ages[i]);
					  out.print("&nbsp;");
					}
				}else{
				  out.println("age라는 이름의 web parameter없음.");
				}
		 
      out.write("				\r\n");
      out.write("	</li>\r\n");
      out.write("	<li>\r\n");
      out.write("	<table>\r\n");
      out.write("	<tr>\r\n");
      out.write("		<th>포로토콜헤더명</th>\r\n");
      out.write("		<th>포로토콜헤더값</th>\r\n");
      out.write("	</tr>\r\n");
      out.write("	");

		String header="";
		Enumeration<String> headerEnum=request.getHeaderNames();
		while( headerEnum.hasMoreElements()){
		  header=headerEnum.nextElement();
		
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>");
      out.print( header );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print( request.getHeader(header) );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		\r\n");
      out.write("		");

		}
	
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("	</li>\r\n");
      out.write("	</ul>\r\n");
      out.write("	\r\n");
      out.write("	<a href=\"http://192.168.10.216/jsp_prj/day0419/request.jsp?name=정명호&age=25&age=24\">다른 서버 요청</a>\r\n");
      out.write("	<a href=\"http://localhost/jsp_prj/day0419/request.jsp?name=정명호&age=25&age=24\">localhost요청</a>\r\n");
      out.write("	<form method=\"post\">\r\n");
      out.write("	<input type=\"hidden\" name=\"name\" value=\"윤웅찬\"/>\r\n");
      out.write("	<input type=\"hidden\" name=\"age\" value=\"28\"/>\r\n");
      out.write("	<input type=\"hidden\" name=\"age\" value=\"26\"/>\r\n");
      out.write("	<input type=\"submit\" value=\"POST방식요청\" class=\"btn btn-success btn-sm\"/>\r\n");
      out.write("	</form>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
