/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-05-17 00:14:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.user.login;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import user.login.UserVO;
import user.login.UserDAO;

public final class user_005flogin_005fprocess_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  public java.lang.String getServletInfo() {
    return "유저 로그인 프로세스";
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(2);
    _jspx_imports_classes.add("user.login.UserDAO");
    _jspx_imports_classes.add("user.login.UserVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

    // 캐시 제어문 (세션 보안, 실시간 데이터 업데이트를 위해)
    response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1
    response.setHeader("Pragma", "no-cache"); // HTTP 1.0
    response.setDateHeader("Expires", 0); // Proxies

 // 폼 데이터에서 유저 아이디와 비밀번호를 가져옴
    String userId = request.getParameter("member_id");
    String password = request.getParameter("member_passwd");

    // 디버깅을 위한 출력
    System.out.println("받은 userId: " + userId);
    System.out.println("받은 password: " + password);
    
    
    // UserDAO 객체 생성
    UserDAO userDAO = new UserDAO();
    
    // 로그인 시도
    boolean loginSuccess = userDAO.userLogin(userId, password);

 // 비밀번호를 입력한 경우 로그인 시도에 실패한 경우
    if (!loginSuccess) {
        String errorMessage = "아이디 또는 비밀번호가 올바르지 않습니다.";
        
      out.write("\r\n");
      out.write("        <script type='text/javascript'>\r\n");
      out.write("            alert('");
      out.print( errorMessage );
      out.write("');\r\n");
      out.write("            location='userLogin.jsp';\r\n");
      out.write("        </script> \r\n");
      out.write("        \r\n");
      out.write("        ");

    } else {
        // 로그인 시도 및 검증
        UserVO loginResult = userDAO.verifyLogin(userId);

        // 로그인 결과에 따른 처리
        if (loginResult != null) {
            if (loginResult.getWithdrawalFlag().equals("T")) {
                // 탈퇴한 회원
                String errorMessage = "탈퇴한 회원입니다.";
                
      out.write("\r\n");
      out.write("                <script type='text/javascript'>\r\n");
      out.write("                    alert('");
      out.print( errorMessage );
      out.write("');\r\n");
      out.write("                    location='userLogin.jsp';\r\n");
      out.write("                </script>\r\n");
      out.write("                ");

            } else if (loginResult.getAccessLimitFlag().equals("T")) {
                // 접근 제한 회원
                String errorMessage = "접근 제한 회원입니다.";
                
      out.write("\r\n");
      out.write("                <script type='text/javascript'>\r\n");
      out.write("                    alert('");
      out.print( errorMessage );
      out.write("');\r\n");
      out.write("                    location='userLogin.jsp';\r\n");
      out.write("                </script>\r\n");
      out.write("                ");

            } else {
                // 로그인 성공 시 세션에 정보를 저장하고, 메인 페이지로 리다이렉트
                session = request.getSession();
                session.setAttribute("userId", userId);
                session.setAttribute("isLoggedIn", true);
        
                System.out.println("세션에 userId 저장 완료");
        
                String loginMessage = "로그인 성공";
                
      out.write("\r\n");
      out.write("                <script type='text/javascript'>\r\n");
      out.write("                    alert('");
      out.print( loginMessage );
      out.write("');\r\n");
      out.write("                    location = '../../index.jsp';\r\n");
      out.write("                </script>\r\n");
      out.write("                ");

                // 메인 페이지로 리다이렉트
                //response.sendRedirect("../../index.jsp");
            }
        }
    }

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
