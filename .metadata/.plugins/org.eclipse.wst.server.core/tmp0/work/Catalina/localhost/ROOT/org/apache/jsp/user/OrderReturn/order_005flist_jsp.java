/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-05-17 00:14:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.user.OrderReturn;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import user.order.UserReturnDAO;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.List;
import user.orderReturnSearch.OrderReturnDAO;
import user.orderReturnSearch.OrderVO;

public final class order_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  public java.lang.String getServletInfo() {
    return "";
  }

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(6);
    _jspx_imports_classes.add("user.orderReturnSearch.OrderReturnDAO");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("user.orderReturnSearch.OrderVO");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("user.order.UserReturnDAO");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");

String userId = (String) session.getAttribute("userId");


if (userId == null) {
    System.out.println("로그인이 필요합니다. ");

      out.write("\n");
      out.write("    <script type=\"text/javascript\">\n");
      out.write("        alert('로그인이 필요합니다.');\n");
      out.write("        window.location.href = '../login/userLogin.jsp'; // 경로 수정 필요\n");
      out.write("\n");
      out.write("    </script>\n");

    return;
}

      out.write(" \n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!-- DatePicker -->\n");
      out.write("<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css\">\n");
      out.write("<!-- DatePicker -->\n");
      out.write("\n");
      out.write("\n");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../assets/jsp/user/lib.jsp", out, false);
      out.write("\n");
      out.write("<!-- golgolz start -->\n");
      out.write("<style>\n");
      out.write(".ec-base-box {\n");
      out.write("	padding: 20px;\n");
      out.write("	margin-left: auto;\n");
      out.write("	margin-right: auto;\n");
      out.write("	border: 5px solid #e8e8e8;\n");
      out.write("	color: #404040;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistoryhead .stateSelect {\n");
      out.write("	display: inline-block;\n");
      out.write("	padding: 0 12px 0 0;\n");
      out.write("	margin: 0 5px 0 2px;\n");
      out.write("	background: url(//img.echosting.cafe24.com/skin/base/common/ico_bar.gif)\n");
      out.write("		no-repeat 100% 6px;\n");
      out.write("}\n");
      out.write("\n");
      out.write("[class^='btnNormal'], a[class^='btnNormal'] {\n");
      out.write("	display: inline-block;\n");
      out.write("	box-sizing: border-box;\n");
      out.write("	padding: 2px 8px;\n");
      out.write("	border: 1px solid #d1d1d1;\n");
      out.write("	border-radius: 2px;\n");
      out.write("	font-family: \"굴림\", Gulim;\n");
      out.write("	font-size: 12px;\n");
      out.write("	line-height: 18px;\n");
      out.write("	font-weight: normal;\n");
      out.write("	text-decoration: none;\n");
      out.write("	vertical-align: middle;\n");
      out.write("	word-spacing: -0.5px;\n");
      out.write("	letter-spacing: 0;\n");
      out.write("	text-align: center;\n");
      out.write("	white-space: nowrap;\n");
      out.write("	color: #222;\n");
      out.write("	background-color: #fff;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistoryhead fieldset button {\n");
      out.write("	width: 14px;\n");
      out.write("	height: 14px;\n");
      out.write("	margin: 0 5px 0 2px;\n");
      out.write("	background: none;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistoryhead fieldset img {\n");
      out.write("	vertical-align: middle;\n");
      out.write("}\n");
      out.write("\n");
      out.write("fieldset {\n");
      out.write("	display: block;\n");
      out.write("	margin-inline-start: 2px;\n");
      out.write("	margin-inline-end: 2px;\n");
      out.write("	padding-block-start: 0.35em;\n");
      out.write("	padding-inline-start: 0.75em;\n");
      out.write("	padding-inline-end: 0.75em;\n");
      out.write("	padding-block-end: 0.625em;\n");
      out.write("	min-inline-size: min-content;\n");
      out.write("	border-width: 2px;\n");
      out.write("	border-style: groove;\n");
      out.write("	border-color: rgb(192, 192, 192);\n");
      out.write("	border-image: initial;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistoryhead fieldset .period a {\n");
      out.write("	padding: 0;\n");
      out.write("	border: 0;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistoryhead fieldset .fText {\n");
      out.write("	width: 72px;\n");
      out.write("	height: 22px;\n");
      out.write("	margin: 0 0 0 2px;\n");
      out.write("	padding: 0 6px;\n");
      out.write("	border: 1px solid #d5d5d5;\n");
      out.write("	line-height: 22px;\n");
      out.write("	font-size: 12px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistoryhead ul {\n");
      out.write("	margin: 10px 0 0;\n");
      out.write("	color: #939393;\n");
      out.write("	line-height: 1.5;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistoryhead ul li {\n");
      out.write("	padding: 0 0 0 9px;\n");
      out.write("	background:\n");
      out.write("		url(//img.echosting.cafe24.com/skin/base/common/ico_square2.gif)\n");
      out.write("		no-repeat 4px 7px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistorylistitem .title {\n");
      out.write("	margin: 40px 0 10px 10px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistoryhead fieldset .period img {\n");
      out.write("	margin: 0 0 0 -1px;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistoryhead fieldset .period {\n");
      out.write("	display: inline-block;\n");
      out.write("	margin: 0 2px;\n");
      out.write("	font-size: 0;\n");
      out.write("	vertical-align: middle;\n");
      out.write("}\n");
      out.write("\n");
      out.write(".xans-myshop-orderhistorylistitem.ec-base-table td .line {\n");
      out.write("	text-decoration: underline;\n");
      out.write("}\n");
      out.write("\n");
      out.write("table,td{\n");
      out.write("	text-align: center;\n");
      out.write("}\n");
      out.write("\n");
      out.write("#history_start_date,#history_end_date{\n");
      out.write("	width: 90px;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("<!-- golgolz end -->\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../assets/jsp/user/header.jsp", out, false);
      out.write("\n");
      out.write("	<div id=\"wrap\">\n");
      out.write("		<div id=\"main\">\n");
      out.write("			<!-- golgolz start -->\n");
      out.write("			<div id=\"container\">\n");
      out.write("				<div id=\"contents\">\n");
      out.write("\n");
      out.write("					<div class=\"path\">\n");
      out.write("						<span>현재 위치</span>\n");
      out.write("						<ol>\n");
      out.write("							<li><a href=\"/\">홈</a></li>\n");
      out.write("							<li><a href=\"/myshop/index.html\">마이쇼핑</a></li>\n");
      out.write("							<li title=\"현재 위치\"><strong>주문조회</strong></li>\n");
      out.write("						</ol>\n");
      out.write("					</div>\n");
      out.write("\n");
      out.write("					<div class=\"titleArea\">\n");
      out.write("						<h2>주문조회</h2>\n");
      out.write("					</div>\n");
      out.write("\n");
      out.write("					<div\n");
      out.write("						class=\"xans-element- xans-myshop xans-myshop-orderhistorytab ec-base-tab \">\n");
      out.write("						<ul class=\"menu\">\n");
      out.write("							<li class=\"tab_class selected\"><a\n");
      out.write("								href=\"http://localhost/user/OrderReturn/order_list.jsp\">주문내역조회\n");
      out.write("							</a></li>\n");
      out.write("							<li class=\"tab_class_cs\"><a\n");
      out.write("								href=\"http://localhost/user/OrderReturn/return_list.jsp\">반품 내역\n");
      out.write("							</a></li>\n");
      out.write("							<li class=\"tab_class_old displaynone\"><a\n");
      out.write("								href=\"/myshop/order/list_old.html?mode=old&amp;history_start_date=2024-01-25&amp;history_end_date=2024-04-24&amp;past_year=2023\">이전\n");
      out.write("									주문내역 (<span id=\"xans_myshop_total_orders_old\">0</span>)\n");
      out.write("							</a></li>\n");
      out.write("						</ul>\n");
      out.write("					</div>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("$(function() {\n");
      out.write("	\n");
      out.write("	\n");
      out.write("    $(\"#btnToday\").click(function() {// 오늘 날짜 불러오기\n");
      out.write("        const today = new Date();\n");
      out.write("        console.log(\"today : \", today);\n");
      out.write("        const year = today.getFullYear();\n");
      out.write("        console.log(\"year :\", year)\n");
      out.write("        const month = String(today.getMonth() + 1).padStart(2, '0');\n");
      out.write("        const day = String(today.getDate()).padStart(2, '0');\n");
      out.write("        \n");
      out.write("        const formattedDate = year + '-' + month + '-' + day;\n");
      out.write("        console.log(\"Formatted date: \", formattedDate);\n");
      out.write("        \n");
      out.write("        $(\"#fr_date\").val(formattedDate);\n");
      out.write("        $(\"#to_date\").val(formattedDate);\n");
      out.write("        \n");
      out.write("     	// 페이지를 새로 고침하여 스크립틀릿에서 값을 다시 읽을 수 있도록 합니다.\n");
      out.write("        $(\"#fsearch\").submit();\n");
      out.write("        \n");
      out.write("    });\n");
      out.write("    $(\"#btnWeekly\").click(function() { // 1주일 전 날짜 불러오기\n");
      out.write("        // 현재 날짜를 가져옵니다.\n");
      out.write("        const today = new Date();\n");
      out.write("\n");
      out.write("        // 일주일 전 날짜를 계산합니다.\n");
      out.write("        const lastWeek = new Date(today.getFullYear(), today.getMonth(), today.getDate() - 7);\n");
      out.write("\n");
      out.write("        const year = lastWeek.getFullYear();\n");
      out.write("        const month = String(lastWeek.getMonth() + 1).padStart(2, '0');\n");
      out.write("        const day = String(lastWeek.getDate()).padStart(2, '0');\n");
      out.write("        const formattedDate = year + '-' + month + '-' + day;\n");
      out.write("\n");
      out.write("        $(\"#fr_date\").val(formattedDate);\n");
      out.write("        $(\"#to_date\").val(today.toISOString().slice(0, 10));\n");
      out.write("\n");
      out.write("        // 폼을 제출합니다.\n");
      out.write("        $(\"#fsearch\").submit();\n");
      out.write("    });\n");
      out.write("    $(\"#btnMonthly\").click(function() {\n");
      out.write("        // 현재 날짜를 가져옵니다.\n");
      out.write("        const today = new Date();\n");
      out.write("\n");
      out.write("        // 한 달 전 날짜를 계산합니다.\n");
      out.write("        const lastMonth = new Date(today.getFullYear(), today.getMonth() - 1, today.getDate());\n");
      out.write("\n");
      out.write("        // 한 달 전 날짜를 \"yyyy-mm-dd\" 형식으로 조합합니다.\n");
      out.write("        const year = lastMonth.getFullYear();\n");
      out.write("        const month = String(lastMonth.getMonth() + 1).padStart(2, '0');\n");
      out.write("        const day = String(lastMonth.getDate()).padStart(2, '0');\n");
      out.write("        const formattedDate = year + '-' + month + '-' + day;\n");
      out.write("\n");
      out.write("        // 'fr_date' 입력 필드의 값을 한 달 전의 날짜로 설정합니다.\n");
      out.write("        $(\"#fr_date\").val(formattedDate);\n");
      out.write("        // 'to_date' 입력 필드의 값을 오늘의 날짜로 설정합니다.\n");
      out.write("        $(\"#to_date\").val(today.toISOString().slice(0, 10));\n");
      out.write("\n");
      out.write("        // 폼을 제출합니다.\n");
      out.write("        $(\"#fsearch\").submit();\n");
      out.write("    });\n");
      out.write("    $(\"#btnReset\").click(function() {\n");
      out.write("        // 초기화 버튼을 누르면 userInfoManage.jsp로 리다이렉트합니다.\n");
      out.write("        window.location.href = \"order_list.jsp\";\n");
      out.write("    });\n");
      out.write("/*     \n");
      out.write("    // tr 요소에 클릭 이벤트를 추가합니다.\n");
      out.write("    $(\"tr\").on(\"click\", function() {\n");
      out.write("        // 해당 tr 요소의 id 속성에서 userId를 가져옵니다.\n");
      out.write("        const userId = $(this).attr('id');\n");
      out.write("        \n");
      out.write("     // 디버깅: userId 값을 콘솔에 출력합니다.\n");
      out.write("        console.log(\"클릭된 tr 요소의 userId:\", userId);\n");
      out.write("        \n");
      out.write("        // encodeURIComponent를 사용하여 userId를 URL 인코딩합니다.\n");
      out.write("        const encodedUserId = encodeURIComponent(userId);\n");
      out.write("        \n");
      out.write("     // 디버깅: 인코딩된 userId 값을 콘솔에 출력합니다.\n");
      out.write("        console.log(\"URL 인코딩된 userId:\", encodedUserId);\n");
      out.write("        \n");
      out.write("        // 다른 JSP로 리다이렉트할 URL을 만듭니다.\n");
      out.write("		const url = \"order_list.jsp?userId=\" + encodedUserId;\n");
      out.write("        \n");
      out.write("        // 해당 URL로 리다이렉트합니다.\n");
      out.write("        window.location.href = url;\n");
      out.write("    });\n");
      out.write("     */\n");
      out.write("    \n");
      out.write(" // Flatpickr를 사용하여 날짜 선택 input에 Datepicker 기능 추가\n");
      out.write("    document.addEventListener('DOMContentLoaded', function () {\n");
      out.write("        // 시작일과 종료일 input 요소 가져오기\n");
      out.write("        var frDateInput = document.getElementById('fr_date');\n");
      out.write("        var toDateInput = document.getElementById('to_date');\n");
      out.write("\n");
      out.write("        // Flatpickr 적용\n");
      out.write("        flatpickr(frDateInput, {\n");
      out.write("            dateFormat: 'Y-m-d', // 날짜 형식 설정\n");
      out.write("            allowInput: true // 키보드로 직접 입력 허용\n");
      out.write("        });\n");
      out.write("\n");
      out.write("        flatpickr(toDateInput, {\n");
      out.write("            dateFormat: 'Y-m-d', // 날짜 형식 설정\n");
      out.write("            allowInput: true // 키보드로 직접 입력 허용\n");
      out.write("        });\n");
      out.write("    });\n");
      out.write("     \n");
      out.write("});\n");
      out.write("</script>\n");
      out.write(" \n");
      out.write("\n");
      out.write("					<form name=\"fsearch\" id=\"fsearch\" method=\"get\" onsubmit=\"return handleFormSubmit(event); \" action=\"order_list.jsp\">\n");
      out.write("\n");
      out.write("						<div\n");
      out.write("							class=\"xans-element- xans-myshop xans-myshop-orderhistoryhead \">\n");
      out.write("							<fieldset class=\"ec-base-box\">\n");
      out.write("								<legend>검색기간설정</legend>\n");
      out.write("								\n");
      out.write("									<input type=\"button\" id=\"btnToday\" onclick=\"\" class=\"btn_small white\" value=\"오늘\">\n");
      out.write("									<input type=\"button\" id=\"btnWeekly\" onclick=\"\" class=\"btn_small white\" value=\"일주일\">\n");
      out.write("									<input type=\"button\" id=\"btnMonthly\"onclick=\"search_date('fr_date','to_date',this.value);\" class=\"btn_small white\" value=\"1개월\">\n");
      out.write("									<input type=\"button\" id=\"btnReset\"onclick=\"\" class=\"btn_small white\" value=\"초기화\">\n");
      out.write("									\n");
      out.write("									\n");
      out.write("								<input type=\"text\" name=\"fr_date\" value=\"");
      out.print( (request.getParameter("fr_date") != null ? request.getParameter("fr_date") : "") );
      out.write("\" id=\"fr_date\" class=\"frm_input w80 hasDatepicker\" maxlength=\"10\">\n");
      out.write(" 								~ \n");
      out.write("								<input type=\"text\" name=\"to_date\" value=\"");
      out.print( (request.getParameter("to_date") != null ? request.getParameter("to_date") : "") );
      out.write("\" id=\"to_date\" maxlength=\"10\">\n");
      out.write("								<input type=\"submit\" name=\"btn_confirm\" id=\"btn_confirm\" value=\"검색\" class=\"btn_medium\">\n");
      out.write("							</fieldset>\n");
      out.write("						</div>\n");
      out.write("					</form>\n");
      out.write("					<!-- Flatpickr 라이브러리 추가 -->\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/flatpickr\"></script>\n");
      out.write("    <script>\n");
      out.write("        // Flatpickr를 사용하여 날짜 선택 input에 Datepicker 기능 추가\n");
      out.write("        document.addEventListener('DOMContentLoaded', function () {\n");
      out.write("            // 시작일과 종료일 input 요소 가져오기\n");
      out.write("            var frDateInput = document.getElementById('fr_date');\n");
      out.write("            var toDateInput = document.getElementById('to_date');\n");
      out.write("\n");
      out.write("            // Flatpickr 적용\n");
      out.write("            flatpickr(frDateInput, {\n");
      out.write("                dateFormat: 'Y-m-d', // 날짜 형식 설정\n");
      out.write("                allowInput: true // 키보드로 직접 입력 허용\n");
      out.write("            });\n");
      out.write("\n");
      out.write("            flatpickr(toDateInput, {\n");
      out.write("                dateFormat: 'Y-m-d', // 날짜 형식 설정\n");
      out.write("                allowInput: true // 키보드로 직접 입력 허용\n");
      out.write("            });\n");
      out.write("        });\n");
      out.write("    </script>\n");
      out.write("					\n");
      out.write("					\n");
      out.write("					\n");
      out.write("					<div\n");
      out.write("						class=\"xans-element- xans-myshop xans-myshop-orderhistorylistitem ec-base-table typeList\">\n");
      out.write("						<!--\n");
      out.write("        $login_url = /member/login.html\n");
      out.write("    -->\n");
      out.write("						<div class=\"title\">\n");
      out.write("							<h6>주문 상품 정보</h6>\n");
      out.write("						</div>\n");
      out.write("						<table border=\"1\" summary=\"\">\n");
      out.write("							<caption>주문 상품 정보</caption>\n");
      out.write("							<colgroup>\n");
      out.write("								<col style=\"width: 135px;\">\n");
      out.write("								<col style=\"width: 93px;\">\n");
      out.write("								<col style=\"width: auto;\">\n");
      out.write("								<col style=\"width: 61px;\">\n");
      out.write("								<col style=\"width: 111px;\">\n");
      out.write("								<col style=\"width: 111px;\">\n");
      out.write("								<col style=\"width: 111px;\">\n");
      out.write("							</colgroup>\n");
      out.write("							<thead>\n");
      out.write("								<tr>\n");
      out.write("									<th scope=\"col\">주문일자<br>[주문번호]\n");
      out.write("									</th>\n");
      out.write("									<th scope=\"col\">이미지</th>\n");
      out.write("									<th scope=\"col\">상품정보</th>\n");
      out.write("									<th scope=\"col\">수량</th>\n");
      out.write("									<th scope=\"col\">상품구매금액</th>\n");
      out.write("									<th scope=\"col\">주문처리상태</th>\n");
      out.write("									<th scope=\"col\">구매현황</th>\n");
      out.write("								</tr>\n");
      out.write("							</thead>\n");
      out.write("							<tbody class=\"center \">\n");
      out.write("							 \n");
      out.write("							 ");
 

				 String frDate = request.getParameter("fr_date");
				 String toDate = request.getParameter("to_date");
				 
				 userId = (String) session.getAttribute("userId");

				 // 입력값을 디버깅합니다.
				 System.out.println("fr_date: " + frDate + ", to_date: " + toDate);

				 // 사용자 정보 목록을 얻는 로직
				 OrderReturnDAO dao = new OrderReturnDAO();
				 List<OrderVO> userList = null;
				 UserReturnDAO dao2 = UserReturnDAO.getInstance();
				 

				 // 날짜 포맷팅 및 초기값 설정
				 SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
				 String today = formatter.format(new Date());

				 if (frDate == null || frDate.trim().isEmpty()) {
				     frDate = "1970-01-01"; // 시작 날짜가 입력되지 않았을 때, 초기 날짜 설정
				 }
				 if (toDate == null || toDate.trim().isEmpty()) {
				     toDate = "2099-01-01"; // 종료 날짜가 입력되지 않았을 때, 오늘 날짜로 설정
				 }

				// 날짜 범위에 따른 사용자 정보 검색
				    try {
				      
				      System.out.println("Session User ID: " + userId);
				      
				        userList = dao.searchOrdersByDateRange(userId, frDate, toDate);
				        if (userList != null && !userList.isEmpty()) {
				          System.out.println("Orders found for user: " + userId);
				          for (OrderVO order : userList) {
				              System.out.println("Order ID: " + order.getId() 
				              + ", Date: " + order.getInputDate() + ", Total Price: " + order.getTotalPrice());
				              // 필요한 다른 주문 정보들도 출력할 수 있습니다.
				          }
				      } else {
				          System.out.println("No orders found for user: " + userId);
				      }
				        System.out.println("------ 날짜 범위에 따른 사용자 정보가 조회되었습니다. ------");
				        System.out.println("frDate: " + frDate + ", toDate: " + toDate);
				    } catch (Exception e) {
				        e.printStackTrace();
				    }
				
				 // 구매확정 버튼 클릭 시 상태 변경 메소드 호출
				    String purchaseConfirmationBtn = request.getParameter("purchaseConfirmationBtn");
				    if (purchaseConfirmationBtn != null) {
				        String cartId = request.getParameter("cartId"); // 클릭된 버튼에 해당하는 주문의 cartId 가져오기
				        System.out.println("cartid : " + cartId);
				        
				        boolean isUpdated = dao.updatePurchaseState(cartId);
				        System.out.println("업데이트 결과 : " + isUpdated);
				        if (isUpdated) {
				            out.println("<script>alert('구매 상태가 성공적으로 변경되었습니다.');  window.location.href = 'order_list.jsp'; </script>");
				        } else {
				            out.println("<script>alert('이미 구매 확정 상태입니다.');</script>");
				        }
				    }
				    
				 // 반품접수 버튼 클릭 시 로직
				    String returnAcceptBtn = request.getParameter("returnAcceptBtn");
				    if (returnAcceptBtn != null) {
				        String cartId = request.getParameter("cartId"); // 클릭된 버튼에 해당하는 주문의 cartId 가져오기
				        int quantity = Integer.parseInt(request.getParameter("quantity")); // 반품 수량 파라미터를 얻습니다.
				        
				        try {
				            int updateResult = dao2.updateReturn(cartId);
				            
				            if (updateResult > 0) {
				                dao2.insertReturn(cartId, quantity);
				                out.println("<script>alert('반품이 성공적으로 접수되었습니다.'); window.location.href = 'order_list.jsp';</script>");
				            } else {
				                out.println("<script>alert('반품 접수에 실패했습니다.'); window.location.href = 'order_list.jsp';</script>");
				            }
				        } catch (Exception e) {
				            out.println("<script>alert('처리 중 오류가 발생했습니다.'); window.location.href = 'order_list.jsp';</script>");
				            e.printStackTrace();
				        }
				    }

				// 사용자 정보 출력
				 for (int i = 0;i < userList.size(); i++) {
				   	OrderVO orderInfo = userList.get(i);
				   	String cartId = orderInfo.getCartId(); // 현재 행의 cartId 가져오기
				   	
				   	if ("주문".equals(orderInfo.getOrderFlag()) && !"불필요".equals(orderInfo.getDeliveryState())) {
				     
      out.write("\n");
      out.write("				     <tr id=\"");
      out.print(orderInfo.getCartId() );
      out.write("\">\n");
      out.write("				         <td class=\"tal\"><span class=\"sv_wrap\">");
      out.print( orderInfo.getInputDate() );
      out.write("<br>\n");
      out.write("						<a href=\"../../order/order_detail.jsp?cartId=");
      out.print(orderInfo.getCartId());
      out.write("\" class=\"link\"><strong>[");
      out.print( orderInfo.getCartId() );
      out.write("]</strong></a>\n");
      out.write("						</span>\n");
      out.write("				         \n");
      out.write("				        \n");
      out.write("                			\n");
      out.write("							<!-- 반품 접수 버튼 -->\n");
      out.write("							<form id=\"returnAcceptForm");
      out.print( cartId );
      out.write("\" action=\"");
      out.print(request.getRequestURI());
      out.write("\" method=\"post\">\n");
      out.write("    						<input type=\"hidden\" name=\"cartId\" value=\"");
      out.print( cartId );
      out.write("\">\n");
      out.write("    						<!-- 반품 수량을 orderInfo.getProductAmount() 값으로 자동 설정합니다. -->\n");
      out.write("    						<input type=\"hidden\" name=\"quantity\" value=\"");
      out.print( orderInfo.getProductAmount() );
      out.write("\">\n");
      out.write("    						<input type=\"submit\" class=\"btnNormal\" name=\"returnAcceptBtn\" value=\"반품접수\" onclick=\"return confirm('반품을 접수하시겠습니까?');\">\n");
      out.write("							</form>\n");
      out.write("\n");
      out.write(" 							<!-- 구매확정 버튼을 감싸는 폼 -->\n");
      out.write("							<form id=\"purchaseConfirmationForm");
      out.print( cartId );
      out.write("\" action=\"");
      out.print(request.getRequestURI());
      out.write("\" method=\"post\" style=\"display: inline;\">\n");
      out.write("                			<input type=\"hidden\" name=\"cartId\" value=\"");
      out.print( cartId );
      out.write("\">\n");
      out.write("                			");
 if (!"구매확정".equals(orderInfo.getPurchaseState())) { 
      out.write("\n");
      out.write("    						<input type=\"submit\" class=\"btnNormal\" name=\"purchaseConfirmationBtn\" value=\"구매확정\" onclick=\"return confirm('구매를 확정하시겠습니까?');\">\n");
      out.write("    						");
 } else { 
      out.write("\n");
      out.write("    						<input type=\"button\" class=\"btnNormal\" value=\"구매확정됨\" disabled>\n");
      out.write("    						<input type=\"button\" class=\"btnNormal\" value=\"리뷰쓰기\" \n");
      out.write("    						onclick=\"redirectToReviewPage('");
      out.print( orderInfo.getCode() );
      out.write("', '");
      out.print( cartId );
      out.write("')\">\n");
      out.write("\n");
      out.write("    						");
 } 
      out.write("\n");
      out.write("               				<!-- <input type=\"submit\" class=\"btnNormal\" name=\"purchaseConfirmationBtn\" value=\"구매확정\"> -->\n");
      out.write("           				</form>\n");
      out.write("						\n");
      out.write("				         </td>\n");
      out.write("				         <td>\n");
      out.write("				         <img src=\"../../assets/images/goods/");
      out.print( orderInfo.getDefaultImg() );
      out.write("\" alt=\"Product Image\" style=\"width: 110px; height: auto;\">\n");
      out.write("				         </td>\n");
      out.write("				         <td>");
      out.print( orderInfo.getCode() );
      out.write(" <br> ");
      out.print( orderInfo.getName() );
      out.write("</td>\n");
      out.write("				         <td>");
      out.print( orderInfo.getProductAmount() );
      out.write("</td>\n");
      out.write("				         <td><strong>");
      out.print( String.format("%,d", orderInfo.getTotalPrice()) );
      out.write(" 원 </strong></td> <!--이 부분은 주문에 대한 총 가격임  -->\n");
      out.write("				         <td>");
      out.print( orderInfo.getDeliveryState() );
      out.write("</td>\n");
      out.write("				         <td>");
      out.print( orderInfo.getPurchaseState() );
      out.write("</td>\n");
      out.write("				     </tr>\n");
      out.write("				     ");

				   	}//조건문
				 }//반복문
    
      out.write("\n");
      out.write("    <script>\n");
      out.write("    function redirectToReviewPage(code, cartId) {\n");
      out.write("        // code와 cartId를 URL에 파라미터로 추가하여 리뷰 작성 페이지로 이동\n");
      out.write("        window.location.href = \"../../review/review_write.jsp?code=\" + code + \"&cartId=\" + cartId;\n");
      out.write("    	}\n");
      out.write("	</script>\n");
      out.write("    \n");
      out.write("								\n");
      out.write("								\n");
      out.write("								<!-- <tr class=\"xans-record-\">\n");
      out.write("									<td class=\"number \">2024-04-07\n");
      out.write("										<p>\n");
      out.write("											<a href=\"http://localhost/user_src/order/orderdetail.html\"\n");
      out.write("												class=\"line\">[20240407-0000129]</a>\n");
      out.write("										</p> <a href=\"cancel.html?order_id=20240407-0000129\"\n");
      out.write("										class=\"btnNormal displaynone\">구매확정</a> <a\n");
      out.write("										href=\"return.html?order_id=20240407-0000129\"\n");
      out.write("										class=\"btnNormal displaynone\">반품신청</a>\n");
      out.write("									</td>\n");
      out.write("									<td class=\"thumb\"><a\n");
      out.write("										href=\"/product/detail.html?product_no=6183&amp;cate_no=523\"><img\n");
      out.write("											src=\"//insideobject.com/web/product/medium/202307/890ea578b65f474e850a49e0862f1158.jpg\"\n");
      out.write("											style=\"width: 100px;\"\n");
      out.write("											onerror=\"this.src='//img.echosting.cafe24.com/thumb/img_product_small.gif';\"\n");
      out.write("											alt=\"\"></a></td>\n");
      out.write("									<td class=\"product left middle\"><strong class=\"name\"><a\n");
      out.write("											href=\"/product/i-live-with-six-cats-고양이의-바다-유광-카드-하드-케이스/6183/category/523/\"\n");
      out.write("											class=\"ec-product-name\">[i live with six cats] 고양이의 바다 유광\n");
      out.write("												카드 하드 케이스</a></strong>\n");
      out.write("										<div class=\"option \">[옵션: galaxy s22 (카드하드불가)/유광하드]</div>\n");
      out.write("										<p class=\"gBlank5 displaynone\">무이자할부 상품</p></td>\n");
      out.write("									<td>1</td>\n");
      out.write("									<td class=\"right\"><strong>20,000원</strong>\n");
      out.write("									<div class=\"displaynone\"></div></td>\n");
      out.write("									<td class=\"state\">\n");
      out.write("										<p class=\"txtEm\">배송완료</p>\n");
      out.write("										<p class=\"displaynone\">\n");
      out.write("											<a href=\"#\" target=\"_self\"></a>\n");
      out.write("										</p>\n");
      out.write("										<p class=\"displaynone\">\n");
      out.write("											<a href=\"#none\" class=\"line\" onclick=\"\">[]</a>\n");
      out.write("										</p> \n");
      out.write("									</td>\n");
      out.write("									<td>\n");
      out.write("										<p>구매 미확정</p>\n");
      out.write("										<p class=\"displaynone\">-</p>\n");
      out.write("									</td>\n");
      out.write("								</tr> -->\n");
      out.write("								\n");
      out.write("							</tbody>\n");
      out.write("						</table>\n");
      out.write("						<p class=\"message displaynone\">주문 내역이 없습니다.</p>\n");
      out.write("					</div>\n");
      out.write("\n");
      out.write("					<div\n");
      out.write("						class=\"xans-element- xans-myshop xans-myshop-orderhistorypaging ec-base-paginate\">\n");
      out.write("						<a\n");
      out.write("							href=\"?page=1&amp;history_start_date=2024-01-25&amp;history_end_date=2024-04-24&amp;past_year=2023\"\n");
      out.write("							class=\"first\"><img\n");
      out.write("							src=\"//img.echosting.cafe24.com/skin/base/common/btn_page_first.gif\"\n");
      out.write("							alt=\"첫 페이지\"></a> <a\n");
      out.write("							href=\"?page=1&amp;history_start_date=2024-01-25&amp;history_end_date=2024-04-24&amp;past_year=2023\"><img\n");
      out.write("							src=\"//img.echosting.cafe24.com/skin/base/common/btn_page_prev.gif\"\n");
      out.write("							alt=\"이전 페이지\"></a>\n");
      out.write("						<ol>\n");
      out.write("							<li class=\"xans-record-\"><a\n");
      out.write("								href=\"?page=1&amp;history_start_date=2024-01-25&amp;history_end_date=2024-04-24&amp;past_year=2023\"\n");
      out.write("								class=\"this\">1</a></li>\n");
      out.write("						</ol>\n");
      out.write("						<a\n");
      out.write("							href=\"?page=1&amp;history_start_date=2024-01-25&amp;history_end_date=2024-04-24&amp;past_year=2023\"><img\n");
      out.write("							src=\"//img.echosting.cafe24.com/skin/base/common/btn_page_next.gif\"\n");
      out.write("							alt=\"다음 페이지\"></a> <a\n");
      out.write("							href=\"?page=1&amp;history_start_date=2024-01-25&amp;history_end_date=2024-04-24&amp;past_year=2023\"\n");
      out.write("							class=\"last\"><img\n");
      out.write("							src=\"//img.echosting.cafe24.com/skin/base/common/btn_page_last.gif\"\n");
      out.write("							alt=\"마지막 페이지\"></a>\n");
      out.write("					</div>\n");
      out.write("				</div>\n");
      out.write("			</div>\n");
      out.write("			<hr class=\"layout\">\n");
      out.write("			<div id=\"banner\"></div>\n");
      out.write("			<div id=\"quick\"></div>\n");
      out.write("			<!-- golgolz end -->\n");
      out.write("		</div>\n");
      out.write("	</div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
